Задумка автора тестируемой веб-страницы проста: посетитель сайта должен найти все 18 тестовых случаев, задуманных автором для тестирования текстового поля. 

Данные предлагается вводить лишь в 1 доступное поле «Имя».

Автор предупреждает, что не стоит тестировать кроссбраузерность, ввод "нецензурных слов", размеры окна браузера, производительность и т.д.
Поле «Имя» имеет максимальную длину в 30 символов.

Попытка автоматизировать тестирования данного сайта показалась мне интересной затеей по нескольким причинам:

1. Когда-то я уже проходил данный тест вручную и знал, что не всё так просто. Часть тестовых случаев связана с необходимость брать значение
из куки, проверкой кода страницы (а именно комментария, находящегося между закрывающими тегами "/body" и "/html"), обнаружением отсутствующего css-файла
и использованием его имени в качестве тестового случая.
Автоматизировать все эти действия показалось мне интересной задачей.

2. Автор сайта предупреждает, что не стоит использовать средства автоматизации, так как сервер будет ограничивать доступ при получении 
более 30 запросов в секунду. В нашем случае это не большая проблема, ведь мы спокойно можем использовать "window mode", вместо привычного для 
codeceptjs "headless mode". Хотя тест удачно проходится и в headless режиме.

3. Протестировать сайт для тестирования скиллов тестировщика... Ну разве не звучит забавно?!

Входные данные (такие как спрятанный в куки код, html-комментарий и название отсутствующего css-файла) статичны и не меняются.
Однако вариант с внесением изменений мной предусмотрен и мой автоматизированный тест справится с изменением содержания и длины вышеперечисленных тестовых данных.
Серьёзной проблемой станет лишь изменение положения этих данных внутри содержащих их строк.

К данному тесту также прилагается отснятое мной видео прохождения теста в "window mode" режиме.
На видео видно, как в результате автоматизации теста счётчик обнаруженных тестовых случаев достигает отметки "18 out of 18".
К слову, на проверку данного условия направлена последняя строка теста: `I.seeTextEquals('18', 'span[class="values-tested"]')`;

На момент окончания теста тестируемый веб-сайт начинает запрашивать капчу, однако мне удалось ровно уместиться в доступное нам количество действий
до запроса капчи от пользователя. В конце видео отчётливо видно, что тест заканчивается со статусом "OK" за 50 секунд. Headless режим позволит сократить
время прохождения теста до 31-35 секунд.