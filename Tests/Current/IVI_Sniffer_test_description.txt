Тестируемая веб-страница предлагает посетителю пройти небольшой тест на знания о http-запросах и умения по их перехвату/ подмене.

Изначально предполагается, что посетитель будет пользоваться "снифферами", однако вручную я выполнил этот тест используя только браузерный DevTools.

Создание первого автотеста для портфолио показало мне мои недостаточные знания по использованию CodeceptJS для иммитации запросов к серверу.
Именно поэтому своей второй работой для портфолио я решил выбрать именно данную веб-страницу.

Для каждой части теста в самом js-файле предусмотрено краткое описание производимых в ней действий. Также мной закомментированы многие
производимые действия, потому данное описание, скорее всего, будет во многом повторять уже написанное мной в комментариях к тесту.

Итак, теперь по порядку:
1. Первая часть теста предлагает нам ввести в поля "Логин" и "Пароль" некие неизвестные нам валидные значения для логина и пароля.
Когда мы вводим любое сочетание случайных значений логина и пароля мы получаем красный текст с ошибкой и подсказкой о том,
что нам надо делать дальше.

Потому первым делом автотест вводит слова "Login" в поле "Логин" и "Password"
Когда-то я уже проходил данный тест вручную и знал, что не всё так просто. Часть тестовых случаев связана с необходимость брать значение
из куки, проверкой кода страницы (а именно комментария, находящегося между закрывающими тегами "/body" и "/html"), обнаружением отсутствующего css-файла
и использованием его имени в качестве тестового случая.
Автоматизировать все эти действия показалось мне интересной задачей.

2. Автор сайта предупреждает, что не стоит использовать средства автоматизации, так как сервер будет ограничивать доступ при получении 
более 30 запросов в секунду. В нашем случае это не большая проблема, ведь мы спокойно можем использовать "window mode", вместо привычного для 
codeceptjs "headless mode". Хотя тест удачно проходится и в headless режиме.

3. Протестировать сайт для тестирования скиллов тестировщика... Ну разве не звучит забавно?!

Входные данные (такие как спрятанный в куки код, html-комментарий и название отсутствующего css-файла) статичны и не меняются.
Однако вариант с внесением изменений мной предусмотрен и мой автоматизированный тест справится с изменением содержания и длины вышеперечисленных тестовых данных.
Серьёзной проблемой станет лишь изменение положения этих данных внутри содержащих их строк.

К данному тесту также прилагается отснятое мной видео прохождения теста в "window mode" режиме.
На видео видно, как в результате автоматизации теста счётчик обнаруженных тестовых случаев достигает отметки "18 out of 18".
К слову, на проверку данного условия направлена последняя строка теста: `I.seeTextEquals('18', 'span[class="values-tested"]')`;

На момент окончания теста тестируемый веб-сайт начинает запрашивать капчу, однако мне удалось ровно уместиться в доступное нам количество действий
до запроса капчи от пользователя. В конце видео отчётливо видно, что тест заканчивается со статусом "OK" за 50 секунд. Headless режим позволит сократить
время прохождения теста до 31-35 секунд.