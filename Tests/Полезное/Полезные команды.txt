- ДЕБАГИНГ

1) Сохранение скриншотов проваленного теста
npx codeceptjs run -p screenshotOnFail

2) Сохранение скриншотов каждого шага теста
npx codeceptjs run -p stepByStepReport

3) Пауза при ошибке
npx codeceptjs run -p pauseOnFail
Или установить enabled true для плагина в файле конфигурации

- ПОВТОРЫ

1) Повторить 1 шаг N раз
I.retry(N).see('Welcome')

ИЛИ
I.retry({
    retries: 2,
    minTimeout: 100,
    maxTimeout: 3000,
    when: err => err.message === 'Node not visible'
}).seeElement('#user');

2) Повторить несколько шагов N раз
    await retryTo((tryNum) => {
    I.switchTo('#editor frame');
    I.click('Open');
    I.see('Opened')
}, N);

3) Повторить весь сценарий N раз:
Scenario('...', ({ I }) => {
    // ... just test ...
}).retry(2);

- ЗАХВАТ ЗНАЧЕНИЯ ИЗ ПОЛЯ

1) Для получения значения какого-либо элемента стоит использовать метод grab*. Использовать их можно ТОЛЬКО в асинхронных функциях с оператором await
Scenario ('get value of current tasks', async ({I}) => {
    ...
    let numTodos = await I.grabTextFrom('.todo-count strong');
});

- ПРЕДВАРИТЕЛЬНЫЕ ДЕЙСТВИЯ

1) Фоновый хук, может открывать веб-сайт, логинить пользователя и т.д.
Before(({ I }) => { // or Background
    I.amOnPage('/documentation');
});

2) Особые объекты, не имеющие доступа к браузеру. Нужны для настройки сложных тестов перед запуском
BeforeSuite(({ I }) => {
    I.syncDown('testfolder');
});
  
AfterSuite(({ I }) => {
    I.syncUp('testfolder');
    I.clearDir('testfolder');
});

3) Указать в какой области страницы мы будем производить действия
within( 'section - css/xpath', () => {...} )

Также Within умеет возвращать значения:
const val = await within('#sidebar', () => {
    return I.grabTextFrom({ css: 'h1' });
  });
I.fillField('Description', val);

- УСЛОВНОЕ ТЕСТИРОВАНИЕ

1) Способ выполнять неудачные операции без падения всего теста есть.
Например, надо нажать ктонку "принять cookie", которая появляется только в первый раз.

tryTo(() => I.click('Accept', '.cookies'));

- КОММЕНТАРИИ
1) Оставляем комментарий и указываем его цвет
I.say('This is red', 'red');

- НЕСКОЛЬКО СЕССИЙ

1) Запуск нескольких сессий браузера внутри одного теста:
session('john', { browser: 'firefox' } , () => {
    I.amOnPage('/');
});

Команда "session('имя сеанса')" без стрелочной функции будет просто запускать браузер, не переключаясь на него.
"Session" поддерживает возвращение значений через return внутри асинхронных функций.

- ПРОПУСК СЦЕНАРИЕВ:

1) xScenario - пропустить текущий тест
2) Scenario.skip - пропустить текущий тест
3) Scenario.only - запустить только текущий тест 
4) xFeature - пропустить текущий набор тестов (с 2.6.6)
5) Feature.skip - пропустить текущий набор тестов (с 2.6.6)

- ЗАГОТОВКА ПОД ТЕСТ НА БУДУЩЕЕ

1) Для планируемого тест-кейса можно указать параметр .todo
Этот параметр указывает на то, что тест не готов, но находится в разработке.

Scenario.todo('Test',  I => {
    /** ... */ 
});

- ДЕЙСТВИЕ НАД НЕСКОЛЬКИМИ ЭЛЕМЕНТАМИ

1) Если нам надо провести операцию над всеми элементами, имеющими совпадающий локатор - используем функцию Each Element.
Данная функция может выполнять несколько произвольных действий, поэтому первый аргумент должен содержать описание выполняемых действий.

"Each Element" обладает следующими аргументами:
* Цель - Текст комментария. Оповещает о джействиях, что будут производиться над элементами;
* Локатор - путь CSS/XPath
* Func (element, index) - асинхронная функция, выполняемая для каждого элемента

await eachElement(
    'click all checkboxes',
    'input.custom-checkbox',
    async (el, index) => {
        await el.click();
});

- Ещё примеры Each Element:
2) await eachElement('click all checkboxes', 'form input[type=checkbox], async (el) => {
await el.click(); });

3) Кликнуть по нечётным элементам:
await eachElement ('click odd buttons', '.button-select', async (el, index) => { if (index % 2) await el.click(); })

4) Кликнуть по всем видимым элементам:
const assert = require ('assert');
await eachElement ('check all items are visible','.item', async (el) => { assert(await el.isVisible()); });

- ИММИТАЦИЯ ЗАПРОСОВ ДЛЯ РАБОТЫ В ИЗОЛИРОВАННОМ ПРИЛОЖЕНИИ

Мы можем ускорять наши тесты (например, блокируя трекеры), или получать нужный нам ответ от сервера, заменив реальный запрос явно заданным.
Так можно изолировать тестирование приложения от серверной части.

Например, вам не хочется сохранять данные в БД и вам ИЗВЕСТЕН запрос, который выполняет сохранение этих данных.
Тогда вы сможете сымитировать запрос, а приложение будет рассматривать это как действительный ответ, но на самом деле данные не будут сохранены.

Иммитация запросов включается дополнительным помощником MockRequest:
helpers: { {...},
    MockRequest: {}
}
Чтобы добавить синтаксис mockRequest в автозаполнение - необходимо прописать команду "npx codeceptjs def" после изменения файла конфигурации.

MockRequest API: https://codecept.io/helpers/MockRequest/#mockrequest

Иммитация останавливается командой "I.stopMocking()".


